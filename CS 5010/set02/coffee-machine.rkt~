;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname coffee-machine) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require rackunit)
(require "extras.rkt")

;data definition
(define-struct MachineState (coffe chocolate bank curbalance))


;initial-machine : NonNegInt NonNegInt -> MachineState
;GIVEN: a number of cups of coffee and of hot chocolate
;RETURNS: the state of a machine loaded with the given number of cups
;         of coffee and of hot chocolate, with an empty bank.
(define (initial-machine num1 num2)
  (make-MachineState num1 num2 0 0))

;machine-next-state : MachineState CustomerInput -> MachineState
;GIVEN: a machine state and a customer input
;RETURNS: the state of the machine that should follow the customer's
;input
(define (machine-next-state MachineState CustomerInput)
  (cond
    [(integer? CustomerInput) (input-coin MachineState CustomerInput)]
    [(string=? CustomerInput "coffee") (get-coffee MachineState CustomerInput)]

;input-coin: machine-state NonNegInt
(define (input-coin ms input)
  (make-MachineState (MachineState-coffee ms) (MachineState-chocolate ms)
                     (MachineState-bank ms) (+ (MachineState-curbalance ms) input)
                     ))
;get-coffee
(define (get-coffee ms)
  (cond
    [(and (> MachineState-curbalance 1.5) (> MachineState-coffee 0)) (dispense-coffee ms)]

;dispense-coffee
(define (dispense-coffee ms)
  (make-MachineState (- (MachineState-coffee ms) 1) (MachineState-chocolate ms)
                     (+ (MachineState-bank ms)  1.5) (- (MachineState-curbalance ms) 1.5)))
                     